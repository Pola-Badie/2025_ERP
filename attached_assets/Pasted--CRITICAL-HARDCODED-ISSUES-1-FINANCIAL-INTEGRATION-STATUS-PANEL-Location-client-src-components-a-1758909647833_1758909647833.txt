ðŸš¨ CRITICAL HARDCODED ISSUES
1. FINANCIAL INTEGRATION STATUS PANEL
Location: client/src/components/accounting/FinancialIntegrationStatus.tsx
Lines 89-94, 108-113, 127-132:

// HARDCODED: Integration status
const isConnected = integrationStatus?.status === 'active' && integrationStatus?.accountingIntegration === 'connected';
// HARDCODED: Tax rate display
taxRate: financialPrefs.taxRate || 14,  // Should be from system settings
// HARDCODED: Currency format
currency: 'EGP',  // Should be configurable
2. UNIFIED ACCOUNTING DASHBOARD
Location: client/src/components/accounting/UnifiedAccountingDashboard.tsx
Lines 45-62:

// HARDCODED: Monthly revenue calculation
revenueThisMonth: dashboard?.revenueThisMonth || 0,
// HARDCODED: Static expense amounts
expensesThisMonth: dashboard?.expensesThisMonth || 0,
// HARDCODED: Net profit calculation using static data
netProfit: dashboard?.netProfit || 0,
// HARDCODED: Outstanding invoices amount
outstandingInvoices: dashboard?.outstandingInvoices || 0,
3. DASHBOARD SUMMARY CARDS
Location: client/src/pages/DashboardNew.tsx
Lines: Multiple locations:

// HARDCODED: Revenue calculation
<div className="text-2xl font-bold text-green-600">
  {formatCurrency(accountingData?.totalRevenue || 0)}
</div>
// HARDCODED: Profit margin display
<p className="text-sm text-green-500 mt-1 flex items-center">
  {accountingData?.profitMargin?.toFixed(1) || "0.0"}% margin
</p>
4. REAL-TIME DASHBOARD
Location: client/src/components/dashboard/RealTimeDashboard.tsx
Lines: Multiple locations:

// HARDCODED: Refresh intervals
refetchInterval: 30000, // 30 seconds - hardcoded
// HARDCODED: Stale time
staleTime: 5 * 60 * 1000, // 5 minutes - hardcoded
// HARDCODED: Retry attempts
retry: 3, // hardcoded retry count
5. MONTHLY SALES CHART DATA
Location: server/routes.ts
Lines 2,847-2,863:

// HARDCODED: Monthly sales data structure
const monthlySales = [
  { name: 'Jan', sales: 5.56 },
  { name: 'Feb', sales: 5.48 },
  { name: 'Mar', sales: 0 },
  // ... more hardcoded months
];
6. PROFIT & LOSS REPORT
Location: client/src/components/accounting/ProfitAndLoss.tsx
Lines 89-95:

// HARDCODED: Currency formatting
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-EG', {
    style: 'currency',
    currency: 'EGP'  // Should be configurable
  }).format(amount);
};
// HARDCODED: Default period type
const [periodType, setPeriodType] = useState<"monthly" | "quarterly" | "yearly">("monthly");
7. BALANCE SHEET
Location: client/src/components/accounting/BalanceSheet.tsx
Lines 95-105:

// HARDCODED: Company name in reports
<CardTitle className="text-lg mb-1">Premier</CardTitle>
// HARDCODED: Currency in balance sheet
style: 'currency',
currency: 'USD',  // Inconsistent with EGP elsewhere
minimumFractionDigits: 2
8. EXPENSE REPORT GENERATION
Location: client/src/components/reports/ExpenseReport.tsx
Lines 45-51, 89-95:

// HARDCODED: Color scheme for expense categories
const generateCategoryColor = (categoryName: string): string => {
  const colors = [
    '#8b5cf6', // purple
    '#f59e0b', // amber
    // ... 13 more hardcoded colors
  ];
// HARDCODED: PDF report title
doc.text('Expense Report', 105, 15, { align: 'center' });
9. INVENTORY SUMMARY CALCULATIONS
Location: server/routes.ts
Lines 1,456-1,470:

// HARDCODED: Low stock threshold
const lowStockThreshold = 10;  // Should be configurable per product
// HARDCODED: Expiry warning days
const expiryWarningDays = 30;  // Should be system setting
// HARDCODED: Inventory value calculation method
const totalValue = products.reduce((sum, product) => {
  return sum + (product.quantity * product.costPrice);  // Always uses cost price
}, 0);
10. CUSTOMER PAYMENT ALLOCATION
Location: server/routes-customer-payments.ts
Lines 78-95:

// HARDCODED: Mock payment data generation
const payment: Payment = {
  id: i + 1,
  paymentNumber: `PMT-${String(2025000 + i).padStart(6, '0')}`,
  customerId: faker.number.int({ min: 1, max: 10 }),
  customerName: faker.company.name(),  // Should be real customer data
  paymentDate: faker.date.recent({ days: 30 }).toISOString(),
  amount: faker.number.int({ min: 1000, max: 10000 }) / 100,
  // ... more faker data
};
11. USER PERMISSIONS CONTEXT
Location: client/src/contexts/UserPermissionsContext.tsx
Lines 65-70:

// HARDCODED: Admin role check
if (user?.role === 'admin') {
  return true;  // Hardcoded admin access
}
// HARDCODED: Permission module names
return permissions.includes(moduleName);
12. INVOICE CREATION FORM
Location: client/src/pages/CreateInvoice.tsx
Lines 89-95:

// HARDCODED: Default form values
const getDefaultFormValues = (financialPrefs: any): InvoiceFormValues => ({
  customer: {
    id: undefined,
    name: '',
    company: '',
    // ... hardcoded empty defaults
  },
  taxRate: financialPrefs.taxRate || 14,  // Hardcoded fallback
  vatRate: financialPrefs.vatRate || 14,  // Hardcoded fallback
});
13. INVENTORY SETTINGS
Location: client/src/pages/Inventory.tsx
Lines 156-162:

// HARDCODED: Units of measure
unitsOfMeasure: ['L', 'PCS', 'T', 'KG', 'g', 'mg'],
// HARDCODED: Product types
productTypes: ['Raw Material', 'Semi-Raw Material', 'Finished Product'],
// HARDCODED: Status options
statusOptions: ['Active', 'Inactive', 'Discontinued', 'Out of Stock'],
14. BACKUP SCRIPT CONFIGURATION
Location: scripts/backup/backup-database.sh
Lines 4-8:

# HARDCODED: Backup retention period
RETENTION_DAYS=7
# HARDCODED: Database connection details
DB_HOST=${PGHOST:-"localhost"}
DB_PORT=${PGPORT:-"5432"}
DB_NAME=${PGDATABASE:-"premier_erp"}
15. EMAIL SERVICE TEMPLATES
Location: server/email-service.ts
Lines 89-105:

// HARDCODED: Email templates
export const emailTemplates = {
  invoiceCreated: (invoice: any, customer: any) => ({
    subject: `Invoice ${invoice.invoiceNumber} - Premier ERP`,
    body: `
      <h2>Invoice ${invoice.invoiceNumber}</h2>
      <p>Dear ${customer.name},</p>
      <p>Please find attached your invoice for ${invoice.totalAmount}.</p>
      // ... hardcoded email content
    `
  }),
16. REAL-TIME ANALYTICS DATA
Location: server/routes-realtime.ts
Lines 23-35:

// HARDCODED: Mock analytics data
const reportData = {
  salesTrend: [
    { date: '2024-01-01', sales: 12000, orders: 45, revenue: 15000 },
    { date: '2024-01-02', sales: 13500, orders: 52, revenue: 16800 },
    // ... more hardcoded data points
  ],
};
17. CHART OF ACCOUNTS STRUCTURE
Location: client/src/components/accounting/ChartOfAccounts.tsx
Lines 35-55:

// HARDCODED: Account types and subtypes
const accountTypes = [
  { value: "Asset", label: "Asset" },
  { value: "Liability", label: "Liability" },
  // ... hardcoded account structure
];
const accountSubtypes = {
  Asset: [
    { value: "Current Asset", label: "Current Asset" },
    { value: "Fixed Asset", label: "Fixed Asset" },
    // ... hardcoded subtypes
  ],
};
18. LANGUAGE TRANSLATIONS
Location: client/src/contexts/LanguageContext.tsx
Lines 45-89:

// HARDCODED: Translation strings
const translations = {
  en: {
    dashboard: 'Dashboard',
    inventory: 'Inventory',
    // ... hundreds of hardcoded translations
  },
  ar: {
    dashboard: 'Ù„ÙˆØ­Ø© Ø§Ù„ØªØ­ÙƒÙ…',
    inventory: 'Ø§Ù„Ù…Ø®Ø²ÙˆÙ†',
    // ... hundreds of hardcoded translations
  }
};
19. SYSTEM THEME COLORS
Location: client/src/index.css
Lines 15-35:

/* HARDCODED: Color scheme */
:root {
  --primary: 222.2 84% 4.9%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  /* ... 20+ hardcoded color variables */
}
20. API ENDPOINT TIMEOUTS
Location: client/src/lib/queryClient.ts
Lines 25-30:

// HARDCODED: API timeouts
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,  // 5 minutes hardcoded
      retry: 3,  // hardcoded retry count
    },
  },
});