# Unified Deployment Fix Strategy

## Pre-Deployment Checklist

### 1. Environment Setup
```bash
# Clean install dependencies
rm -rf node_modules package-lock.json
npm ci

# Verify Node/npm versions match production
node --version
npm --version
```

### 2. TypeScript & Schema Validation
```bash
# Run comprehensive checks
npm run type-check || npx tsc --noEmit
npm run lint
npm run build

# Database schema sync
npx prisma generate && npx prisma db push
# or
npx drizzle-kit generate && npx drizzle-kit push
```

## Common Fix Patterns

### TypeScript Fixes
```typescript
// 1. Fix unknown types
const value = data as ApiResponse;
// or better: runtime validation
const value = ApiResponseSchema.parse(data);

// 2. Handle nullability
const user = await getUser(id);
if (!user) throw new Error('User not found');

// 3. Proper async return types
async function fetchData(): Promise<DataResponse> {
  return await apiCall();
}
```

### Import Corrections
```typescript
// Modern imports
import { WebSocketServer } from 'ws';
import { createTransport } from 'nodemailer';

// Path resolution
import { config } from '@/lib/config';
import type { User } from '@/types/database';
```

### Database Schema Alignment
```sql
-- Add missing columns
ALTER TABLE users ADD COLUMN avatar_url VARCHAR(255);
ALTER TABLE posts ADD COLUMN published_at TIMESTAMP;

-- Update types to match
interface User {
  id: string;
  name: string;
  avatar_url?: string; // newly added, nullable
}
```

## Deployment Pipeline

### Step 1: Local Verification
```bash
# Simulate production build
NODE_ENV=production npm run build
npm run start

# Test critical paths
curl http://localhost:3000/health
npm run test:e2e
```

### Step 2: Configuration Check
```bash
# Verify environment variables
echo $DATABASE_URL
echo $API_KEY

# Check package.json scripts match deployment
cat package.json | jq '.scripts'
```

### Step 3: Deploy with Validation
```bash
# Deploy with immediate rollback capability
npm run deploy
npm run health-check || npm run rollback
```

## Emergency Fixes

### Quick TypeScript Fix
```typescript
// Temporary: suppress specific errors
// @ts-ignore
const result = problematicFunction();

// Better: use type assertion with comment
const result = problematicFunction() as ExpectedType; // TODO: fix upstream
```

### Schema Hotfix
```typescript
// Add optional properties for missing columns
interface User {
  id: string;
  name: string;
  newColumn?: string; // Added for backward compatibility
}
```

### Import Fallback
```typescript
// Handle different versions
try {
  const { WebSocketServer } = require('ws');
} catch {
  const WebSocket = require('ws');
  const WebSocketServer = WebSocket.Server;
}
```

## Post-Deployment Monitoring

```bash
# Monitor for runtime errors
npm run logs:prod
npm run health-check

# Verify database connections
npm run db:status
```

## Success Criteria

✅ `npm run build` completes without errors  
✅ TypeScript compilation passes  
✅ Database migrations applied successfully  
✅ All imports resolve correctly  
✅ Production environment variables set  
✅ Health checks pass post-deployment  

## Rollback Plan

If deployment fails:
```bash
# Immediate rollback
npm run rollback
# or
git revert HEAD && npm run deploy

# Database rollback if needed
npm run db:rollback
```