import { Request, Response } from "express";
import { Express } from "express";
import { db } from "./db";
import { companySettings, insertCompanySettingsSchema } from "@shared/schema";
import { eq } from "drizzle-orm";
import multer from "multer";
import path from "path";
import fs from "fs";

// Configure multer for logo uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadDir = './uploads/company';
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, 'logo-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({ 
  storage: storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|svg/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  },
  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit
});

export function registerCompanyRoutes(app: Express) {
  
  // Get company settings
  app.get("/api/company-settings", async (req: Request, res: Response) => {
    try {
      const settings = await db.select().from(companySettings).where(eq(companySettings.isActive, true));
      
      if (settings.length === 0) {
        // Return default settings if none exist
        const defaultSettings = {
          id: 0,
          companyName: "Morgan ERP",
          companyLegalName: "Morgan Pharmaceutical Solutions",
          logo: null,
          tagline: "Advanced Pharmaceutical Management",
          website: "https://morgan-erp.com",
          email: "info@morgan-pharma.com",
          phone: "+20 2 1234 5678",
          fax: "+20 2 1234 5679",
          address: "123 Pharma Street",
          city: "Cairo",
          state: "Cairo Governorate",
          zipCode: "11511",
          country: "Egypt",
          taxId: "TAX123456789",
          vatNumber: "VAT987654321",
          registrationNumber: "REG456789123",
          currency: "USD",
          currencySymbol: "$",
          timezone: "Africa/Cairo",
          dateFormat: "DD/MM/YYYY",
          languageCode: "en",
          fiscalYearStart: "01-01",
          reportFooter: "This report is generated by Morgan ERP - Pharmaceutical Management System",
          invoiceTerms: "Payment due within 30 days. Late payments subject to 1.5% monthly interest.",
          quotationTerms: "This quotation is valid for 30 days. Prices subject to change without notice.",
          bankName: "National Bank of Egypt",
          bankAccountNumber: "123456789012",
          bankRoutingNumber: "NBE001",
          bankSwiftCode: "NBEGEGCX",
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date(),
        };
        
        res.json(defaultSettings);
        return;
      }
      
      res.json(settings[0]);
    } catch (error) {
      console.error("Error fetching company settings:", error);
      res.status(500).json({ error: "Failed to fetch company settings" });
    }
  });

  // Create or update company settings
  app.post("/api/company-settings", upload.single('logo'), async (req: Request, res: Response) => {
    try {
      const logoPath = req.file ? `/uploads/company/${req.file.filename}` : undefined;
      
      const settingsData = {
        ...req.body,
        ...(logoPath && { logo: logoPath })
      };

      // Validate the settings data
      const validatedData = insertCompanySettingsSchema.parse(settingsData);

      // Check if settings already exist
      const existingSettings = await db.select().from(companySettings).where(eq(companySettings.isActive, true));

      let result;
      if (existingSettings.length > 0) {
        // Update existing settings
        result = await db
          .update(companySettings)
          .set({ ...validatedData, updatedAt: new Date() })
          .where(eq(companySettings.id, existingSettings[0].id))
          .returning();
      } else {
        // Create new settings
        result = await db
          .insert(companySettings)
          .values(validatedData)
          .returning();
      }

      res.json(result[0]);
    } catch (error) {
      console.error("Error saving company settings:", error);
      res.status(400).json({ error: "Failed to save company settings" });
    }
  });

  // Update specific company setting
  app.patch("/api/company-settings/:id", async (req: Request, res: Response) => {
    try {
      const id = parseInt(req.params.id);
      const updateData = { ...req.body, updatedAt: new Date() };

      const result = await db
        .update(companySettings)
        .set(updateData)
        .where(eq(companySettings.id, id))
        .returning();

      if (result.length === 0) {
        res.status(404).json({ error: "Company settings not found" });
        return;
      }

      res.json(result[0]);
    } catch (error) {
      console.error("Error updating company settings:", error);
      res.status(400).json({ error: "Failed to update company settings" });
    }
  });

  // Upload logo separately
  app.post("/api/company-settings/upload-logo", upload.single('logo'), async (req: Request, res: Response) => {
    try {
      if (!req.file) {
        res.status(400).json({ error: "No logo file provided" });
        return;
      }

      const logoPath = `/uploads/company/${req.file.filename}`;
      
      // Update the logo path in the database
      const existingSettings = await db.select().from(companySettings).where(eq(companySettings.isActive, true));
      
      if (existingSettings.length > 0) {
        await db
          .update(companySettings)
          .set({ logo: logoPath, updatedAt: new Date() })
          .where(eq(companySettings.id, existingSettings[0].id));
      }

      res.json({ 
        logoPath,
        message: "Logo uploaded successfully" 
      });
    } catch (error) {
      console.error("Error uploading logo:", error);
      res.status(500).json({ error: "Failed to upload logo" });
    }
  });

  // Delete logo
  app.delete("/api/company-settings/logo", async (req: Request, res: Response) => {
    try {
      const existingSettings = await db.select().from(companySettings).where(eq(companySettings.isActive, true));
      
      if (existingSettings.length > 0 && existingSettings[0].logo) {
        // Delete the file from disk
        const logoPath = path.join(process.cwd(), existingSettings[0].logo);
        if (fs.existsSync(logoPath)) {
          fs.unlinkSync(logoPath);
        }

        // Remove logo path from database
        await db
          .update(companySettings)
          .set({ logo: null, updatedAt: new Date() })
          .where(eq(companySettings.id, existingSettings[0].id));
      }

      res.json({ message: "Logo deleted successfully" });
    } catch (error) {
      console.error("Error deleting logo:", error);
      res.status(500).json({ error: "Failed to delete logo" });
    }
  });

  // Get company branding info for reports/invoices (lightweight endpoint)
  app.get("/api/company-branding", async (req: Request, res: Response) => {
    try {
      const settings = await db
        .select({
          companyName: companySettings.companyName,
          companyLegalName: companySettings.companyLegalName,
          logo: companySettings.logo,
          tagline: companySettings.tagline,
          email: companySettings.email,
          phone: companySettings.phone,
          address: companySettings.address,
          city: companySettings.city,
          state: companySettings.state,
          zipCode: companySettings.zipCode,
          country: companySettings.country,
          currency: companySettings.currency,
          currencySymbol: companySettings.currencySymbol,
          website: companySettings.website,
          taxId: companySettings.taxId,
          vatNumber: companySettings.vatNumber,
          reportFooter: companySettings.reportFooter,
          invoiceTerms: companySettings.invoiceTerms,
          quotationTerms: companySettings.quotationTerms,
        })
        .from(companySettings)
        .where(eq(companySettings.isActive, true));

      if (settings.length === 0) {
        // Return minimal default branding
        res.json({
          companyName: "Morgan ERP",
          companyLegalName: "Morgan Pharmaceutical Solutions",
          logo: null,
          tagline: "Advanced Pharmaceutical Management",
          email: "info@morgan-pharma.com",
          phone: "+20 2 1234 5678",
          address: "123 Pharma Street, Cairo, Egypt",
          city: "Cairo",
          state: "Cairo Governorate",
          zipCode: "11511",
          country: "Egypt",
          currency: "USD",
          currencySymbol: "$",
          website: "https://morgan-erp.com",
          taxId: "TAX123456789",
          vatNumber: "VAT987654321",
          reportFooter: "Generated by Morgan ERP - Pharmaceutical Management System",
          invoiceTerms: "Payment due within 30 days.",
          quotationTerms: "Valid for 30 days. Prices subject to change.",
        });
        return;
      }

      res.json(settings[0]);
    } catch (error) {
      console.error("Error fetching company branding:", error);
      res.status(500).json({ error: "Failed to fetch company branding" });
    }
  });
}