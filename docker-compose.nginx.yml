version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx-proxy:
    image: nginx:alpine
    container_name: premier-erp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl-certs:/etc/nginx/ssl:ro
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    networks:
      - erp-network

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: premier-erp-certbot
    volumes:
      - ./ssl-certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email support@premiererp.io --agree-tos --no-eff-email -d demo.premiererp.io
    depends_on:
      - nginx-proxy

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: premier-erp-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: premier_erp
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-erp_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - erp-network

  # Premier ERP Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: premier-erp-app
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://erp_user:${POSTGRES_PASSWORD:-erp_secure_password_2024}@postgres:5432/premier_erp
      PORT: 5000
      DOMAIN: demo.premiererp.io
    networks:
      - erp-network

  # Premier ERP Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: premier-erp-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - erp-network

volumes:
  postgres_data:
    driver: local
  certbot_webroot:
    driver: local

networks:
  erp-network:
    driver: bridge